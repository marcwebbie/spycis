#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
from collections import namedtuple
from difflib import SequenceMatcher
import os
import sys

import guessit
import requests
from pyquery import PyQuery

headers = {
    "User-Agent": ("Mozilla/5.0 (X11; Linux x86_64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/32.0.1674.0 Safari/537.36")
}
session = requests.Session()
session.headers.update(headers)
http_adapter = requests.adapters.HTTPAdapter(pool_connections=100, pool_maxsize=100)
session.mount('http://', http_adapter)


class lazyproperty:

    def __init__(self, func):
        self.func = func

    def __get__(self, instance, cls):
        if instance is None:
            return self
        else:
            value = self.func(instance)
            setattr(instance, self.func.__name__, value)
            return value


class Subtitle(object):

    def __init__(self):
        self.show = None
        self.season = None
        self.episode = None
        self.episode_title = None
        self.language = None
        self.version = None
        self.completed = None
        self.hearing_impaired = None
        self.corrected = None
        self.hd = None
        self.url = None
        self.retrieved_from_url = None

    @lazyproperty
    def content(self):
        r = session.get(self.url, headers={'Referer': self.retrieved_from_url})
        return r.content

    @lazyproperty
    def text(self):
        r = session.get(self.url, headers={'Referer': self.retrieved_from_url})
        return r.text

    def __str__(self):
        return "<Subtitle: {0.show}, s{0.season}e{0.episode}, {0.episode_title}, {0.version}>".format(self)

    def __repr__(self):
        return self.__str__()


class Addicted(object):

    @property
    def languages(self):
        return {
            'ar': 'Arabic',
            'ca': 'Catala',
            'en': 'English',
            'eu': 'Euskera',
            'fr': 'French',
            'es': 'Spanish',
            'de': 'Germnan',
            'it': 'Italian',
            'br': 'Portuguese (Brazilian)',
        }

    def get_language(self, code):
        return self.languages.get(code, None)

    def get_language_code(self, name):
        return {v: k for k, v in self.languages.items()}.get(name)

    @lazyproperty
    def shows(self):
        Show = namedtuple("Show", ["id", "name"])
        res = session.get('http://www.addic7ed.com/shows.php')
        return [Show(a.attr('href').split('/')[-1], a.text()) for a in PyQuery(res.content)('td.version a').items()]

    def get_subtitles(self, show_id, season, episode, language='en', hearing_impaired=False, release_group=None):
        site_url = "http://www.addic7ed.com"
        apiurl = "http://www.addic7ed.com/show/{0}&season={1}".format(show_id, season)
        pq = PyQuery(apiurl)
        try:
            show_name = pq('#header>a').attr('href').split('/')[-1].replace('_', ' ')
        except:
            show_name = "Unknown"

        subtitles = []
        for cells in [tr.getchildren() for tr in pq('tr.completed')]:
            sub = Subtitle()
            sub.show = show_name
            sub.season = int(cells[0].text)
            sub.episode = int(cells[1].text)
            sub.episode_title = pq('a', cells[2]).text()
            sub.language = self.get_language_code(cells[3].text)
            sub.version = cells[4].text
            sub.completed = True if cells[5].text else False
            sub.hearing_impaired = True if cells[6].text else False
            sub.corrected = True if cells[7].text else False
            sub.hd = True if cells[8].text else False
            sub.url = site_url + pq('a', cells[9]).attr('href')
            sub.retrieved_from_url = apiurl

            # print(sub)
            subtitles.append(sub)

        # filter subs
        subtitles = [
            sub for sub in subtitles
            if (
                sub.season == season and
                sub.episode == episode and
                sub.language == language and
                sub.hearing_impaired == hearing_impaired
            )
        ]

        if any(True for s in subtitles if release_group in s.version):
            return [s for s in subtitles if release_group in s.version]
        else:
            return subtitles

    def search(self, query):
        search_result = [(show, SequenceMatcher(None, query.lower(), show.name.lower()).quick_ratio()) for show in self.shows]
        show = next(filter(lambda x: x[1] == 1.0, search_result), [None])[0]
        if show:
            return show
        else:
            return sorted(search_result, key=lambda x: x[1])[:-10:-1]


def get_args():
    aparser = argparse.ArgumentParser()
    aparser.add_argument("-l", "--language", help="subtitles language")
    aparser.add_argument("-o", "--output", help="output filepath")
    aparser.add_argument("-s", "--stdout", action='store_true', help="print to stdout")
    aparser.add_argument("filepath", help="path to file for subtitles")
    args = aparser.parse_args()

    return args


if __name__ == "__main__":
    args = get_args()
    filepath = args.filepath
    info = guessit.guess_video_info(filepath)

    addicted = Addicted()
    search_result = addicted.search(info['series'])
    if isinstance(search_result, list):
        sys.stderr.write('Not unique search')
        sys.stderr.write("{}\n".format(info))
        for show in search_result:
            sys.stderr.write("{}\n".format(show))
    else:
        show = search_result
        season = info['season']
        episode = info['episodeNumber']
        release = info['releaseGroup']
        language = args.language
        subs = addicted.get_subtitles(show_id=show.id, season=season, episode=episode, language=language, release_group=release)

        if len(subs) > 0:
            if args.stdout:
                print(subs[0].text)
            else:
                filename = args.output if args.output else os.path.splitext(filepath)[0] + '.srt'
                with open(filename, 'w') as subfile:
                    subfile.write(subs[0].text)
                sys.stderr.write("Subtitles save as: {}\n".format(filename))
